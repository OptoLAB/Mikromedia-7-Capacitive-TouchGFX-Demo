/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
    interaction3Counter(0),
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(189, 134, 49));

    flexButton1.setBoxWithBorderPosition(0, 0, 148, 148);
    flexButton1.setBorderSize(5);
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(255, 194, 0), touchgfx::Color::getColorFrom24BitRGB(138, 101, 10), touchgfx::Color::getColorFrom24BitRGB(118, 128, 138), touchgfx::Color::getColorFrom24BitRGB(128, 134, 140));
    flexButton1.setBitmaps(Bitmap(BITMAP_SMARTPHONE1_ID), Bitmap(BITMAP_SMARTPHONE1_ID));
    flexButton1.setBitmapXY(9, 9);
    flexButton1.setPosition(342, -170, 148, 148);

    swipeContainer2.setXY(15, 283);
    swipeContainer2.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_NORMAL_ID), touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_HIGHLIGHT_ID));
    swipeContainer2.setPageIndicatorXY(110, 155);
    swipeContainer2.setSwipeCutoff(20);
    swipeContainer2.setEndSwipeElasticWidth(20);

    swipeContainer2Page1.setWidth(264);
    swipeContainer2Page1.setHeight(176);

    button3.setXY(47, 58);
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    swipeContainer2Page1.add(button3);
    swipeContainer2.add(swipeContainer2Page1);

    swipeContainer2Page2.setWidth(264);
    swipeContainer2Page2.setHeight(176);

    circleProgress1.setXY(80, 33);
    circleProgress1.setProgressIndicatorPosition(0, 0, 104, 104);
    circleProgress1.setRange(0, 100);
    circleProgress1.setCenter(52, 52);
    circleProgress1.setRadius(50);
    circleProgress1.setLineWidth(0);
    circleProgress1.setStartEndAngle(0, 360);
    circleProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_CIRCLE_INDICATOR_BG_FULL_ID));
    circleProgress1Painter.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_MEDIUM_CIRCLE_INDICATOR_FILL_FULL_ID));
    circleProgress1.setPainter(circleProgress1Painter);
    circleProgress1.setValue(60);
    swipeContainer2Page2.add(circleProgress1);
    swipeContainer2.add(swipeContainer2Page2);

    swipeContainer2Page3.setWidth(264);
    swipeContainer2Page3.setHeight(176);

    radioButton1.setXY(110, 64);
    radioButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_INACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_ACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_NORMAL_ID));
    radioButton1.setSelected(false);
    radioButton1.setDeselectionEnabled(false);
    swipeContainer2Page3.add(radioButton1);
    swipeContainer2.add(swipeContainer2Page3);
    swipeContainer2.setSelectedPage(1);

    box2.setPosition(577, 19, 198, 114);
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    animatedImage1.setXY(580, 22);
    animatedImage1.setBitmaps(BITMAP_AMIMATION_01_ID, BITMAP_AMIMATION_26_ID);
    animatedImage1.setUpdateTicksInterval(6);

    buttonWithLabel1.setXY(591, 158);
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T_TEXTSTART));
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    buttonWithLabel1.setAction(buttonCallback);

    buttonWithIcon2.setXY(30, 40);
    buttonWithIcon2.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
    buttonWithIcon2.setIconXY(77, 15);
    buttonWithIcon2.setAction(buttonCallback);

    add(box1);
    add(flexButton1);
    add(swipeContainer2);
    add(box2);
    add(animatedImage1);
    add(buttonWithLabel1);
    add(buttonWithIcon2);
    radioButtonGroup1.add(radioButton1);
}

void Screen2ViewBase::setupScreen()
{

}

//Handles delays
void Screen2ViewBase::handleTickEvent()
{
    if(interaction3Counter > 0)
    {
        interaction3Counter--;
        if(interaction3Counter == 0)
        {

        }
    }
}

//Called when the screen is done with transition/load
void Screen2ViewBase::afterTransition()
{
    //Interaction2
    //When screen is entered move flexButton1
    //Move flexButton1 to x:342, y:176 with LinearIn easing in 200 ms (12 Ticks)
    flexButton1.clearMoveAnimationEndedAction();
    flexButton1.startMoveAnimation(342, 176, 12, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);

    //Interaction3
    //When screen is entered delay
    //Delay for 0 ms (0 Ticks)
    interaction3Counter = INTERACTION3_DURATION;
}

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithLabel1)
    {
        //Interaction4
        //When buttonWithLabel1 clicked execute C++ code
        //Execute C++ code
        if(animatedImage1.isRunning())
        {
            animatedImage1.pauseAnimation();
            buttonWithLabel1.setLabelText(TypedText(T_TEXTSTART));
        }
        else
        {
            animatedImage1.startAnimation(animatedImage1.isReverse(), false, true);
            buttonWithLabel1.setLabelText(TypedText(T_TEXTSTOP));
        }
    }
    else if (&src == &buttonWithIcon2)
    {
        //Interaction1
        //When buttonWithIcon2 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
    }
}

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
}
